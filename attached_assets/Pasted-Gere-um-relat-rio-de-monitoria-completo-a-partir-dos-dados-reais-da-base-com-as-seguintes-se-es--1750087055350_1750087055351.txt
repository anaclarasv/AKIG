Gere um relat√≥rio de monitoria completo a partir dos dados reais da base, com as seguintes se√ß√µes:

M√©tricas Gerais (total de avalia√ß√µes, m√©dia, taxa de aprova√ß√£o, etc.)

Tabela de performance por agente (nome, m√©dia, aprovados, reprovados, %)
Exporte em PDF com PDFKit e Excel com ExcelJS.
Use o modelo abaixo como base:

üì¶ C√≥digo relatorioController.js
javascript
Copiar
Editar
const PDFDocument = require('pdfkit');
const ExcelJS = require('exceljs');
const fs = require('fs');
const path = require('path');

// Exemplo de dados simulados ‚Äì aqui voc√™ usar√° os dados reais do banco
const metricas = {
  totalAvaliacoes: 18,
  mediaPontuacao: 84.3,
  taxaAprovacao: '78%',
  incidentesCriticos: 2,
  formulariosPendentes: 3,
  contestacoes: 1
};

const agentes = [
  { nome: 'Jo√£o Silva', avaliacoes: 6, media: 87.5, aprovados: 5, reprovados: 1, taxa: '83%' },
  { nome: 'Maria Oliveira', avaliacoes: 4, media: 91.0, aprovados: 4, reprovados: 0, taxa: '100%' },
  { nome: 'Ana Santos', avaliacoes: 5, media: 70.2, aprovados: 3, reprovados: 2, taxa: '60%' },
  { nome: 'Carlos Ferreira', avaliacoes: 3, media: 88.0, aprovados: 3, reprovados: 0, taxa: '100%' }
];

// Fun√ß√£o para gerar PDF
function gerarPDF(res) {
  const doc = new PDFDocument();
  const filePath = path.join(__dirname, '../public/relatorio-monitoria.pdf');
  doc.pipe(fs.createWriteStream(filePath));

  doc.fontSize(20).text('Relat√≥rio Completo de Monitoria');
  doc.moveDown();
  doc.fontSize(12).text('AKIG Solutions - Sistema de Monitoria');
  doc.text(`Gerado em: ${new Date().toLocaleDateString()}`);
  doc.moveDown();

  doc.fontSize(14).text('M√©tricas Gerais', { underline: true });
  Object.entries(metricas).forEach(([key, value]) => {
    doc.text(`${key.replace(/([A-Z])/g, ' $1')}: ${value}`);
  });

  doc.moveDown();
  doc.fontSize(14).text('Performance por Agente', { underline: true });
  agentes.forEach((a) => {
    doc.text(`${a.nome}: ${a.media} (Aprov.: ${a.aprovados}, Reprov.: ${a.reprovados}, Taxa: ${a.taxa})`);
  });

  doc.moveDown();
  doc.fontSize(14).text('Observa√ß√µes Gerais', { underline: true });
  doc.fontSize(12).text(
    '- A maior parte das avalia√ß√µes foram positivas.\n' +
    '- 2 incidentes cr√≠ticos identificados e encaminhados.\n' +
    '- Refor√ßar acompanhamento com Ana Santos.'
  );

  doc.end();
  doc.on('finish', () => {
    res.download(filePath);
  });
}

// Fun√ß√£o para gerar Excel
async function gerarExcel(res) {
  const workbook = new ExcelJS.Workbook();
  const sheet1 = workbook.addWorksheet('M√©tricas Gerais');
  const sheet2 = workbook.addWorksheet('Performance por Agente');

  sheet1.addRow(['M√©trica', 'Valor']);
  Object.entries(metricas).forEach(([key, value]) => {
    sheet1.addRow([key.replace(/([A-Z])/g, ' $1'), value]);
  });

  sheet2.addRow(['Nome', 'Avalia√ß√µes', 'M√©dia', 'Aprovados', 'Reprovados', 'Taxa de Aprova√ß√£o']);
  agentes.forEach((a) => {
    sheet2.addRow([a.nome, a.avaliacoes, a.media, a.aprovados, a.reprovados, a.taxa]);
  });

  const filePath = path.join(__dirname, '../public/relatorio-monitoria.xlsx');
  await workbook.xlsx.writeFile(filePath);
  res.download(filePath);
}

// Exportando fun√ß√µes
module.exports = {
  gerarPDF,
  gerarExcel
};
üõ†Ô∏è Rotas no routes/relatorio.js (exemplo):
javascript
Copiar
Editar
const express = require('express');
const router = express.Router();
const { gerarPDF, gerarExcel } = require('../controllers/relatorioController');

router.get('/pdf', gerarPDF);
router.get('/excel', gerarExcel);

module.exports = router;
‚úÖ Resultado
Acessando /relatorio/pdf ‚Üí voc√™ baixa o PDF real.

Acessando /relatorio/excel ‚Üí voc√™ baixa a planilha real.

